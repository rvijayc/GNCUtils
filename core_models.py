#!/usr/bin/env python3
"""
Core data models for GNUCash transaction categorization system.
Defines dataclasses and enums for transactions, rules, and categorization results.
"""

from dataclasses import dataclass, field
from typing import Optional, List
from datetime import date, datetime
from enum import Enum
from decimal import Decimal


class TransactionType(Enum):
    """Type of financial transaction."""
    DEBIT = "debit"
    CREDIT = "credit"


class RuleType(Enum):
    """Type of categorization rule matching algorithm."""
    EXACT_MATCH = "exact_match"  # Description must match pattern exactly
    CONTAINS = "contains"         # Description must contain pattern string
    REGEX = "regex"              # Description must match regex pattern


class RuleSource(Enum):
    """Source/origin of a categorization rule."""
    MANUAL = "manual"                    # Manually specified by user
    HISTORY_BASED = "history_based"      # Generated from GNUCash history
    AI_GENERATED = "ai_generated"        # Generated by AI/LLM agent


@dataclass
class CategorizationRule:
    """
    Represents a single categorization rule.
    Rules are applied to transaction descriptions to determine categories.
    """
    rule_type: RuleType
    rule_source: RuleSource
    pattern: str
    category: str
    transaction_type: Optional[TransactionType] = None  # If None, applies to both
    merchant_name: Optional[str] = None
    description: Optional[str] = None
    confidence: float = 0.0
    regex_exclude: Optional[str] = None  # Exclude pattern - if matches, rule doesn't apply

    # Metadata for rule evaluation (used by history-based rules)
    transaction_count: int = 0
    total_transactions: int = 0
    example_descriptions: List[str] = field(default_factory=list)

    def to_dict(self) -> dict:
        """Convert to dictionary for YAML serialization."""
        result = {
            'rule_type': self.rule_type.value,
            'pattern': self.pattern,
            'category': self.category,
            'confidence': round(self.confidence, 4),
        }

        # Add optional fields only if they have values
        if self.transaction_type:
            result['transaction_type'] = self.transaction_type.value
        if self.merchant_name:
            result['merchant_name'] = self.merchant_name
        if self.description:
            result['description'] = self.description
        if self.regex_exclude:
            result['regex_exclude'] = self.regex_exclude
        if self.transaction_count > 0:
            result['transaction_count'] = self.transaction_count
        if self.total_transactions > 0:
            result['total_transactions'] = self.total_transactions
        if self.example_descriptions:
            result['example_descriptions'] = self.example_descriptions

        return result

    @classmethod
    def from_dict(cls, data: dict, source: RuleSource) -> 'CategorizationRule':
        """Create rule from dictionary (YAML deserialization)."""
        return cls(
            rule_type=RuleType(data['rule_type']),
            rule_source=source,
            pattern=data['pattern'],
            category=data['category'],
            transaction_type=TransactionType(data['transaction_type']) if 'transaction_type' in data else None,
            merchant_name=data.get('merchant_name'),
            description=data.get('description'),
            confidence=data.get('confidence', 0.0),
            regex_exclude=data.get('regex_exclude'),
            transaction_count=data.get('transaction_count', 0),
            total_transactions=data.get('total_transactions', 0),
            example_descriptions=data.get('example_descriptions', [])
        )


@dataclass
class CategorizationResult:
    """
    Result of categorizing a transaction.

    Contains the determined category along with confidence and provenance information.
    Embedded within Transaction objects to keep categorization state separate from
    transaction facts.
    """
    category: str
    confidence: float = 0.0
    matched_rule: Optional[CategorizationRule] = None
    source: Optional[RuleSource] = None
    reasoning: str = ""
    timestamp: datetime = field(default_factory=datetime.now)

    def to_dict(self) -> dict:
        """Convert to dictionary for serialization."""
        result = {
            'category': self.category,
            'confidence': round(self.confidence, 4),
            'source': self.source.value if self.source else None,
            'reasoning': self.reasoning,
            'timestamp': self.timestamp.isoformat()
        }

        if self.matched_rule:
            result['matched_rule'] = {
                'pattern': self.matched_rule.pattern,
                'rule_type': self.matched_rule.rule_type.value,
                'rule_source': self.matched_rule.rule_source.value
            }

        return result


@dataclass
class Transaction:
    """
    Base transaction class - common interface for all transaction sources.

    Represents the immutable facts about a financial transaction, with optional
    categorization result attached after processing.
    """
    description: str
    normalized_description: str
    amount: Decimal
    date: date
    transaction_type: TransactionType
    memo: Optional[str] = None

    # Categorization result (populated by rules engine or LLM categorizer)
    categorization: Optional[CategorizationResult] = None

    def is_categorized(self) -> bool:
        """Check if transaction has been categorized."""
        return self.categorization is not None

    def needs_review(self, confidence_threshold: float = 0.7) -> bool:
        """Check if categorization needs manual review."""
        if not self.categorization:
            return True
        return self.categorization.confidence < confidence_threshold


@dataclass
class GnuCashTransaction(Transaction):
    """
    Transaction read from GnuCash database.

    Includes GnuCash-specific fields like GUID and account paths.
    Used when extracting historical transactions for analysis.
    """
    guid: str = ""
    credit_card_account: str = ""
    credit_card_account_path: str = ""

    # For historical analysis - the actual category from GnuCash
    actual_category_account: Optional[str] = None
    actual_category_full_path: Optional[str] = None


@dataclass
class OFXTransaction(Transaction):
    """
    Transaction read from OFX/QFX file.

    Includes OFX-specific fields like FITID (Financial Institution Transaction ID).
    Used when processing newly downloaded bank statements.
    """
    fitid: str = ""  # Financial Institution Transaction ID
    payee: Optional[str] = None
    check_number: Optional[str] = None
    account_id: Optional[str] = None  # Bank account identifier
